In Python, memory is managed using a private heap space that is created when the interpreter starts up. 
This heap space is managed by the Python memory manager, which is responsible for allocating and 
deallocating memory as needed.

Python uses a combination of reference counting and garbage collection to manage memory. When an object
is created, a reference count is incremented, and when the object is no longer needed, the reference count 
is decremented. When the reference count of an object reaches zero, it is considered garbage and is eligible 
for garbage collection.

Python uses a generational garbage collector, which means that objects are divided into different generations 
based on their age. The most recent generation, known as generation 0, contains the newest objects. As objects 
survive longer, they are promoted to higher generations, and the garbage collector performs more intensive 
checks on them to determine if they are still being used.

Python also provides a module called gc that allows for manual control over the garbage collector. You can disable 
or enable garbage collection, set thresholds for when garbage collection should occur, and manually trigger 
garbage collection.

Overall, Python's memory management system is designed to be transparent to the developer, so most of the time, 
you don't need to worry about managing memory yourself. However, understanding how memory is managed can be useful 
when writing performance-critical applications.




